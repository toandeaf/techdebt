{"version":3,"sources":["components/Engineer.js","components/InterviewForm.js","components/Interview.js","App.js","reportWebVitals.js","index.js"],"names":["Engineer","useState","engineers","updateEngineers","a","fetch","then","response","json","catch","console","error","useEffect","fetchEngineers","data","Box","Table","TableHead","TableRow","TableCell","TableBody","map","engineer","index","username","fullName","team","location","jobTitle","department","isManager","hasBeenInterviewed","to","pathname","replace","InterviewForm","form","updateForm","updateInterviewForm","updateVersion","requestOptions","method","headers","body","JSON","stringify","log","updatedForm","version","Button","color","onClick","questions","question","Grid","toRemove","indexOf","splice","deleteQuestion","TextField","type","defaultValue","linkvalue","onChange","e","event","holdForm","target","value","handleChange","fullWidth","push","Interview","props","interview","updateInterview","Map","answers","updateAnswers","user","split","fetchForm","Object","keys","questionsAndAnswers","answer","multiline","onChangeCapture","updateAnswer","rowsMax","updatedInterview","App","className","href","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b12382d6.chunk.js","sourcesContent":["import {Box, Grid, Tab, Table, TableBody, TableCell, TableHead, TableRow} from \"@material-ui/core\";\nimport {useEffect, useState} from \"react\";\nimport {Link} from \"react-router-dom\";\n\n\nexport const Engineer = () => {\n\n    const [engineers, updateEngineers] = useState([])\n\n    useEffect(() => {\n        fetchEngineers().then(data => {\n            if (data != null) {\n                updateEngineers(data)\n            } else {\n                console.error(\"Error fetching quotes.\");\n            }\n        });\n    }, []);\n\n    async function fetchEngineers() {\n        return await fetch('/engineer/getAll').then(response => {\n            return response.json();\n        }).catch(() => {\n            console.error(\"Error fetching engineers.\");\n            return null;\n        });\n    }\n\n    function renderTableData() {\n        return engineers.map((engineer, index) => {\n            const { username, fullName, team, location, jobTitle, department, isManager, hasBeenInterviewed } = engineer\n\n            return (\n                <TableRow key={username}>\n                    <TableCell>{username}</TableCell>\n                    <TableCell>{fullName}</TableCell>\n                    <TableCell>{team}</TableCell>\n                    <TableCell>{location}</TableCell>\n                    <TableCell>{jobTitle}</TableCell>\n                    <TableCell>{department}</TableCell>\n                    <TableCell>{isManager ? \"Yes\" : \"No\" }</TableCell>\n                    <TableCell>{hasBeenInterviewed ? \"Yes\" : \"No\" }</TableCell>\n                    <TableCell><Link to={{ pathname: \"/interview/\" + username}} replace>Interview</Link></TableCell>\n                </TableRow>\n            )\n        })\n    };\n\n    return (\n        <Box>\n        <Table>\n            <TableHead>\n                <TableRow>\n                    <TableCell>Full Name</TableCell>\n                    <TableCell>Username</TableCell>\n                    <TableCell>Team</TableCell>\n                    <TableCell>Location</TableCell>\n                    <TableCell>Title</TableCell>\n                    <TableCell>Department</TableCell>\n                    <TableCell>Manager</TableCell>\n                    <TableCell>Interviewed</TableCell>\n                    <TableCell>Go To</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {renderTableData()}\n            </TableBody>\n        </Table>\n        </Box>\n    )\n};\n\nexport default Engineer;","import {Box, Button, Grid, TextField} from \"@material-ui/core\";\nimport {useEffect, useState} from \"react\";\n\n\nexport const InterviewForm = () => {\n\n    const emptyForm = {\n        \"version\": 0,\n        \"questions\": [],\n    }\n    const [form, updateForm] = useState(emptyForm);\n\n    const fetchForm = () => {\n        fetch('/interview/form').then(response => {\n            return response.json().then(json => {\n                updateForm(json);\n            });\n        }).catch(() => {\n            console.error(\"Error fetching form.\");\n            return null;\n        });\n    }\n\n    useEffect(() => {\n        fetchForm();\n    }, []);\n\n    const handleChange = (event, index) => {\n        console.log(form);\n        updateForm(form => {\n            let holdForm = form\n            holdForm.questions[index] = event.target.value;\n            return holdForm;\n        })\n    };\n\n    const updateInterviewForm = (updateVersion) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(\n                form\n            )\n        };\n        console.log(requestOptions);\n        fetch('/interview/form/' + updateVersion, requestOptions).then(response => {\n            response.json().then(updatedForm => {\n                updateForm(updatedForm);\n            })\n        });\n    };\n\n    const addQuestion = () => {\n        form.questions.push(\"  \");\n        updateForm(form);\n        updateInterviewForm(false);\n    }\n\n    const deleteQuestion = (index) => {\n        const toRemove = form.questions.indexOf(index);\n        if (index > -1) {\n            form.questions.splice(toRemove, 1);\n        }\n        updateForm(form);\n        updateInterviewForm(false);\n    }\n\n    return (\n        <Box>\n            <h2>Interview Form - Version { form.version } </h2>\n            <Button color={\"primary\"} onClick={() => updateInterviewForm(true)}>Click to Update</Button>\n            { form.questions.map((question, index) =>\n                 (<Grid key={index}>\n                    <h2>Question {index + 1} <Button onClick={() => deleteQuestion(index)}>Delete</Button></h2>\n                    <TextField type=\"text\"  defaultValue={form.questions[index]} linkvalue={form.questions[index]} onChange={(e) => {\n                        handleChange(e, index);\n                    }} fullWidth/>\n                </Grid>)\n                )\n            }\n            <Button color={\"primary\"} onClick={addQuestion}>Click to Add Question</Button>\n        </Box>\n    )\n};\n\nexport default InterviewForm;","import {Box, Button, Grid, TextField} from \"@material-ui/core\";\nimport {useEffect, useState} from \"react\";\n\n\nexport const Interview = (props) => {\n\n    const emptyInterview = {\n        \"id\": \"test\",\n        \"questionsAndAnswers\": {},\n        \"engineer\": {},\n    }\n    const [interview, updateInterview] = useState(emptyInterview);\n    const [answers, updateAnswers] = useState(new Map());\n\n    const fetchForm = () => {\n        let user = props.location.pathname.split(\"/\")[2];\n        fetch('/interview/get/' + user).then(response => {\n            return response.json().then(json => {\n                updateInterview(json);\n            });\n        }).catch(() => {\n            console.error(\"Error fetching form.\");\n            return null;\n        });\n    }\n\n    useEffect(() => {\n        fetchForm();\n    });\n\n    const persistInterview = () => {\n        interview.questionsAndAnswers = answers;\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(\n                interview\n            )\n        };\n        fetch('/interview/persist', requestOptions).then(response => {\n            response.json().then(updatedInterview => {\n                updateInterview(updatedInterview);\n            })\n        });\n    };\n\n    const updateAnswer = (answer, question) => {\n        answers[question] = answer;\n        updateAnswers(answers);\n    }\n\n    return (\n        <Box>\n            <h2>Interview Sheet for {interview.engineer.fullName}</h2>\n            { Object.keys(interview.questionsAndAnswers).map((question, index) => {\n                    let answer = interview.questionsAndAnswers[question];\n                    let output = (<Grid key={index}>\n                            <h3>{question}</h3>\n                            <TextField type=\"text\" multiline={true}\n                                       onChangeCapture={(e) => updateAnswer(e.target.value, question)}\n                                       rowsMax={4} linkvalue={answer}\n                                       defaultValue={answer} fullWidth/>\n                        </Grid>)\n            return output;\n            }\n            )}\n            <Button color={\"primary\"} onClick={persistInterview}>Persist Interview</Button>\n        </Box>\n    )\n}\n\nexport default Interview;","import './App.css';\nimport {Box, Button, Grid} from \"@material-ui/core\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport Engineer from \"./components/Engineer\"\nimport InterviewForm from \"./components/InterviewForm\"\nimport Interview from \"./components/Interview\";\n\nfunction App() {\n    return (\n        <HashRouter>\n            <div className=\"App\">\n                <div className=\"container\">\n                    <h1 className=\"Header\">R&D Interviews</h1>\n                    <Box>\n                        <Grid>\n                            <Button href=\"#/engineers\">Engineers</Button>\n                            <Button href=\"#/interviewForm\">New Interview Form</Button>\n                        </Grid>\n                    </Box>\n                </div>\n                <div className=\"content\">\n                    <Route path=\"/engineers\" component={Engineer}/>\n                    <Route path=\"/interviewForm\" component={InterviewForm}/>\n                    <Route path=\"/interview\" component={Interview}/>\n                </div>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}